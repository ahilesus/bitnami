NAME: superset
LAST DEPLOYED: Tue Jan 28 12:18:16 2025
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: superset/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: superset/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: superset/templates/beat/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-beat
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-beat
    app.kubernetes.io/part-of: superset
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-beat
      app.kubernetes.io/part-of: superset
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: superset/templates/flower/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-flower
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-flower
    app.kubernetes.io/part-of: superset
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-flower
      app.kubernetes.io/part-of: superset
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5555
---
# Source: superset/templates/init/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name:  superset-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/part-of: superset
    app.kubernetes.io/component: init
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/part-of: superset
      app.kubernetes.io/component: init
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: superset/templates/web/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-web
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: superset-web
    app.kubernetes.io/part-of: superset
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: superset-web
      app.kubernetes.io/part-of: superset
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8081
---
# Source: superset/templates/worker/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: superset-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-worker
    app.kubernetes.io/part-of: superset
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-worker
      app.kubernetes.io/part-of: superset
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: superset/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: superset/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: superset-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: superset/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
automountServiceAccountToken: false
---
# Source: superset/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: superset-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
---
# Source: superset/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: superset
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/part-of: superset
automountServiceAccountToken: true
---
# Source: superset/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
type: Opaque
data:
  postgres-password: "SzFnalFsNG9QTQ=="
  password: "R0tRTVJGUFRHbA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: superset/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
type: Opaque
data:
  redis-password: "ZnVQUFZSTThsRg=="
---
# Source: superset/templates/flower/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-flower
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-flower
    app.kubernetes.io/part-of: superset
type: Opaque
data:
  flower-basic-auth: dmliLXVzZXI6Q29tcGxpY2F0ZWRQYXNzd29yZDEyMyE0
---
# Source: superset/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/part-of: superset
type: Opaque
data:
  superset-password: "Q29tcGxpY2F0ZWRQYXNzd29yZDEyMyE0"
  superset-secret-key: "ZUE1Y0pBcWZlSlc1YVNFeGVQNVNrY2tsc095RktBYjEwV1lkUW5teVRQ"
---
# Source: superset/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: superset/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: superset/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: superset/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: superset/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: superset/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: redis
---
# Source: superset/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: superset/templates/flower/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-flower
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-flower
    app.kubernetes.io/part-of: superset
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: flower
      port: 5556
      targetPort: flower
      protocol: TCP
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: superset
    app.kubernetes.io/component: celery-flower
    app.kubernetes.io/part-of: superset
---
# Source: superset/templates/web/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-web
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: superset-web
    app.kubernetes.io/part-of: superset
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/name: superset
    app.kubernetes.io/component: superset-web
    app.kubernetes.io/part-of: superset
---
# Source: superset/templates/beat/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-beat
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-beat
    app.kubernetes.io/part-of: superset
spec:
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-beat
      app.kubernetes.io/part-of: superset
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: superset
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: superset-0.1.0
        app.kubernetes.io/component: celery-beat
        app.kubernetes.io/part-of: superset
    spec:
      
      serviceAccountName: superset
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: superset
                    app.kubernetes.io/component: celery-beat
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_postgresql_connection() {
                    echo "SELECT 1" | postgresql_remote_execute "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD"
                }
        
                info "Connecting to the PostgreSQL instance $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_postgresql_connection"; then
                    error "Could not connect to the database server"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
        # NOTE: The value redis.image is not available unless redis.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        - name: wait-for-redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT_NUMBER} -a ${REDIS_PASSWORD} --user ${REDIS_USER} PING)"
                    if [[ "$result" != "PONG" ]]; then
                    false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    exit 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
      containers:
        - name: celery-beat
          image: docker.io/miruiz145/superset:development
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERSET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-secret-key
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: SUPERSET_ROLE
              value: "celery-beat"
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - pgrep
                - -f
                - celery
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command: ["/bin/sh", "-c", "pgrep -f celery"]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/superset/superset_home
              subPath: superset-home
            - name: empty-dir
              mountPath: /opt/bitnami/superset/tmp
              subPath: app-tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: superset/templates/flower/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-flower
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-flower
    app.kubernetes.io/part-of: superset
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-flower
      app.kubernetes.io/part-of: superset
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: superset
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: superset-0.1.0
        app.kubernetes.io/component: celery-flower
        app.kubernetes.io/part-of: superset
    spec:
      
      serviceAccountName: superset
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: superset
                    app.kubernetes.io/component: celery-flower
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_postgresql_connection() {
                    echo "SELECT 1" | postgresql_remote_execute "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD"
                }
        
                info "Connecting to the PostgreSQL instance $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_postgresql_connection"; then
                    error "Could not connect to the database server"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
        # NOTE: The value redis.image is not available unless redis.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        - name: wait-for-redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT_NUMBER} -a ${REDIS_PASSWORD} --user ${REDIS_USER} PING)"
                    if [[ "$result" != "PONG" ]]; then
                    false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    exit 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
      containers:
        - name: celery-flower
          image: docker.io/miruiz145/superset:development
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERSET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-secret-key
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: SUPERSET_ROLE
              value: "celery-flower"
            - name: FLOWER_BASIC_AUTH
              valueFrom:
                secretKeyRef:
                  name: superset-flower
                  key: flower-basic-auth
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          ports:
            - name: flower
              containerPort: 5555
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: flower
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthcheck
              port: flower
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/superset/superset_home
              subPath: superset-home
            - name: flower-basic-auth
              mountPath: /opt/bitnami/superset/secrets
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: flower-basic-auth
          secret:
            secretName: superset-flower
            items:
              - key: flower-basic-auth
                path: flower-basic-auth
---
# Source: superset/templates/web/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-web
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: superset-web
    app.kubernetes.io/part-of: superset
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: superset-web
      app.kubernetes.io/part-of: superset
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: superset
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: superset-0.1.0
        app.kubernetes.io/component: superset-web
        app.kubernetes.io/part-of: superset
    spec:
      
      serviceAccountName: superset
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: superset
                    app.kubernetes.io/component: superset-web
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_postgresql_connection() {
                    echo "SELECT 1" | postgresql_remote_execute "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD"
                }
        
                info "Connecting to the PostgreSQL instance $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_postgresql_connection"; then
                    error "Could not connect to the database server"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
        # NOTE: The value redis.image is not available unless redis.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        - name: wait-for-redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT_NUMBER} -a ${REDIS_PASSWORD} --user ${REDIS_USER} PING)"
                    if [[ "$result" != "PONG" ]]; then
                    false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    exit 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
        # NOTE: The value postgresql.image is not available unless postgresql.enabled is not set.
        # We could change this to use superset image postgresql client.
        - name: wait-for-examples
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_examples_database() {
                    echo "SELECT dashboard_title FROM dashboards" | postgresql_remote_execute_print_output "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD" | grep "Dashboard"
                }
        
                info "Checking if the 'examples' database exists at $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_examples_database"; then
                    error "Examples database not ready yet"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
      containers:
        - name: superset-web
          image: docker.io/miruiz145/superset:development
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1002
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERSET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-secret-key
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: SUPERSET_ROLE
              value: "webserver"
            - name: SUPERSET_WEBSERVER_PORT_NUMBER
              value: "8081"
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /health
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/superset/superset_home
              subPath: superset-home
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: superset/templates/worker/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/component: celery-worker
    app.kubernetes.io/part-of: superset
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: superset
      app.kubernetes.io/component: celery-worker
      app.kubernetes.io/part-of: superset
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: superset
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: superset-0.1.0
        app.kubernetes.io/component: celery-worker
        app.kubernetes.io/part-of: superset
    spec:
      
      serviceAccountName: superset
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: superset
                    app.kubernetes.io/component: celery-worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_postgresql_connection() {
                    echo "SELECT 1" | postgresql_remote_execute "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD"
                }
        
                info "Connecting to the PostgreSQL instance $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_postgresql_connection"; then
                    error "Could not connect to the database server"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
        # NOTE: The value redis.image is not available unless redis.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        - name: wait-for-redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT_NUMBER} -a ${REDIS_PASSWORD} --user ${REDIS_USER} PING)"
                    if [[ "$result" != "PONG" ]]; then
                    false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    exit 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
      containers:
        - name: celery-worker
          image: docker.io/miruiz145/superset:development
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERSET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-secret-key
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: SUPERSET_ROLE
              value: "celery-worker"
          envFrom:
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 2Gi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  . /opt/bitnami/scripts/superset-env.sh && celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  . /opt/bitnami/scripts/superset-env.sh && celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/superset/superset_home
              subPath: superset-home
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: superset/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: superset-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: superset-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: superset-postgresql
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.4.0
        helm.sh/chart: postgresql-15.5.38
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: superset-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_superset"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitnami_superset"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_superset" -d "dbname=bitnami_superset" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_superset" -d "dbname=bitnami_superset" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: superset/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: superset-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: superset
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: superset-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.6.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 27e62d965b449d15469090f8bea2fa0b570cf541efc8efdeb017dccf86075672
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: superset-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: superset
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: superset-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: superset-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: superset-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: superset
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: superset/templates/init/init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: superset
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: superset
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: superset-0.1.0
    app.kubernetes.io/part-of: superset
    app.kubernetes.io/component: init
  annotations:
    {}
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: superset
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: superset
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: superset-0.1.0
        app.kubernetes.io/part-of: superset
        app.kubernetes.io/component: init
    spec:
      
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      automountServiceAccountToken: false
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                . /opt/bitnami/scripts/libpostgresql.sh
        
                check_postgresql_connection() {
                    echo "SELECT 1" | postgresql_remote_execute "$SUPERSET_DATABASE_HOST" "$SUPERSET_DATABASE_PORT_NUMBER" "$SUPERSET_DATABASE_NAME" "$SUPERSET_DATABASE_USER" "$SUPERSET_DATABASE_PASSWORD"
                }
        
                info "Connecting to the PostgreSQL instance $SUPERSET_DATABASE_HOST:$SUPERSET_DATABASE_PORT_NUMBER"
                if ! retry_while "check_postgresql_connection"; then
                    error "Could not connect to the database server"
                    exit 1
                else
                    info "Connected to the PostgreSQL instance"
                fi
          env:
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
        # NOTE: The value redis.image is not available unless redis.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        - name: wait-for-redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT_NUMBER} -a ${REDIS_PASSWORD} --user ${REDIS_USER} PING)"
                    if [[ "$result" != "PONG" ]]; then
                    false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    exit 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
      containers:
        - name: superset-init
          image: docker.io/miruiz145/superset:development
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERSET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-secret-key
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SUPERSET_DATABASE_HOST
              value: "superset-postgresql"
            - name: SUPERSET_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SUPERSET_DATABASE_NAME
              value: "bitnami_superset"
            - name: SUPERSET_DATABASE_USER
              value: "bn_superset"
            - name: SUPERSET_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-postgresql
                  key: password
            - name: REDIS_HOST
              value: "superset-redis-master"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset-redis
                  key: redis-password
            - name: SUPERSET_ROLE
              value: "init"
            - name: SUPERSET_USERNAME
              value: ""
            - name: SUPERSET_EMAIL
              value: ""
            - name: SUPERSET_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: superset
                  key: superset-password
            - name: SUPERSET_LOAD_EXAMPLES
              value: "true"
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/superset/superset_home
              subPath: superset-home
      volumes:
        - name: empty-dir
          emptyDir: {}

NOTES:
CHART NAME: superset
CHART VERSION: 0.1.0
APP VERSION: 4.0.0

** Please be patient while the chart is being deployed **

Superset can be accessed via port 80 on the following DNS name from within your cluster:

    superset.default.svc.cluster.local

To connect to Superset from outside the cluster, perform the following steps:

1. Obtain the LoadBalancer IP:

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace default -w superset'

    export SERVICE_IP=$(kubectl get svc --namespace default superset --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
    echo "Superset URL: http://${SERVICE_IP}:80"

2. Open a browser and access Superset using the obtained URL.

3. Get your Superset login credentials by running:

    export SUPERSET_PASSWORD=$(kubectl get secret --namespace "default" superset -o jsonpath="{.data.superset-password}" | base64 -d)
    echo User:     user
    echo Password: $SUPERSET_PASSWORD

4. Celery flower has been enabled. You can get your Superset Celery flower login credentials by running:
    export FLOWER_BASIC_AUTH=$(kubectl get secret --namespace "default" superset-flower -o jsonpath="{.data.flower-basic-auth}" | base64 -d)
    echo Flower credentials: $FLOWER_BASIC_AUTH

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - web.resources
  - worker.resources
  - init.resources
  - beat.resources
  - flower.resources
  - defaultInitContainers.waitForDB.resources
  - defaultInitContainers.waitForRedis.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

⚠ SECURITY WARNING: Original containers have been substituted. This Helm chart was designed, tested, and validated on multiple platforms using a specific set of Bitnami and Tanzu Application Catalog containers. Substituting other containers is likely to cause degraded security and performance, broken chart features, and missing environment variables.

Substituted images detected:
  - docker.io/miruiz145/superset:development
