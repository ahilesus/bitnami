{{- if not .Values.global.keycloak.deploy -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-ext-bootstrap
spec:
  template:
    metadata:
      labels:
        hzp.iam.webhook/active: "false"
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - image: {{ include "manifest.image.name" (dict "name" "hzp-util" "globals" .Values.global.components "repo" .Values.global.repository) }}
          name: keycloak-ext-bootstrap
          imagePullPolicy: Always
          securityContext:
            runAsUser: {{ .Values.global.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.global.podSecurityContext.runAsGroup }}
          env:
            - name: KEYCLOAK_URL
              value: "{{ .Values.global.keycloak.scheme }}://{{ tpl .Values.global.keycloak.host . }}:{{ .Values.global.keycloak.port }}" 
            - name: KEYCLOAK_EXT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.bootstrapCredentials.secretName }}
                  key: ext-keycloak-username
            - name: KEYCLOAK_EXT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.bootstrapCredentials.secretName }}
                  key: ext-keycloak-password
            - name: KEYCLOAK_IAM_CLIENT_NAME 
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: iam-client-name
            - name: KEYCLOAK_IAM_CLIENT_PWD 
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: iam-client-pwd
            - name: KEYCLOAK_AUTH_CLIENT_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: auth_client-name
            - name: KEYCLOAK_AUTH_CLIENT_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: auth-client-pwd
            - name: KEYCLOAK_DELCO_CLIENT_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: delco-client-name
            - name: KEYCLOAK_DELCO_CLIENT_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: delco-client-pwd
            - name: KEYCLOAK_SECURITY_ADMIN_USR_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.keycloak.auth.secretName }}
                  key: security-admin-usr-pwd
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              #!/bin/sh

              # Keycloak server information
              KEYCLOAK_URL=${KEYCLOAK_URL}
              KEYCLOAK_EXT_USERNAME=${KEYCLOAK_EXT_USERNAME}
              KEYCLOAK_EXT_PASSWORD=${KEYCLOAK_EXT_PASSWORD}
              KEYCLOAK_EXT_TOKEN=""

              REALM_CONFIG_PATH="/data/realm.json"

              echo 'Connectivity check of external Keycloak...'
              command="curl -o /dev/null -s -w "%{http_code}" --connect-timeout 2 ${KEYCLOAK_URL}"
              status=$(eval "$command")
              error_code=$?
              echo "status: $status, error code: $error_code"
              if [[ "$status" == "000" || "$status" == "500" ]]; then
                  sleep 60
                  exit $error_code
              fi
              echo 'External Keycloak OK âœ“'

              get_admin_token() {
                  echo "Get admin token"
                  token_response=$(curl -s -X POST \
                    --retry 10 --retry-all-errors \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    --data-urlencode "grant_type=password" \
                    --data-urlencode "client_id=admin-cli" \
                    --data-urlencode "username=${KEYCLOAK_EXT_USERNAME}" \
                    --data-urlencode "password=${KEYCLOAK_EXT_PASSWORD}" \
                    "${KEYCLOAK_URL}/auth/realms/master/protocol/openid-connect/token")

                  KEYCLOAK_EXT_TOKEN=$(echo "$token_response" | jq -r '.access_token')

                  if [ -z "$KEYCLOAK_EXT_TOKEN" ] || [ "$KEYCLOAK_EXT_TOKEN" = "null" ]; then
                      echo "Failed to get admin token : ${token_response}"
                      exit 1
                  fi
              }

              create_hzp_realm() {
                  echo "Creating hzp realm"
            
                  realm_config=$(cat "$REALM_CONFIG_PATH" | envsubst)

                  http_status=$(curl -s -X POST -o /dev/null -w "%{http_code}" \
                    --retry 10 --retry-all-errors \
                    -H "Authorization: Bearer ${KEYCLOAK_EXT_TOKEN}" \
                    -H "Content-Type: application/json" \
                    -d "${realm_config}" \
                    "${KEYCLOAK_URL}/auth/admin/realms")

                  # Check the HTTP status code
                  if [ "$http_status" -eq 201 ]; then
                      echo "Realm created  (HTTP status code: $http_status)"
                  elif [ "$http_status" -eq 409 ]; then
                      echo "Realm hzp already exist (HTTP status code: $http_status)"
                  else
                      echo "Status code not handled (HTTP status code: $http_status)"
                      exit 1
                  fi
              }

              get_admin_token
              create_hzp_realm
          volumeMounts:
            - name: realm-secret # pragma: allowlist secret
              mountPath: "/data"
              readOnly: true
      volumes:
        - name: realm-secret # pragma: allowlist secret
          secret:
            secretName: realm-secret
      restartPolicy: Never
{{- end -}}
