{{- $name := "postgresql-credentials-bootstrap"}}
{{- $secretsDirMountPath := "/secrets"}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}
  namespace: {{ .Release.Namespace }}
spec:
  template:
    metadata:
      name: {{ $name }}
      labels:
{{- tpl (toYaml .Values.global.postgresql.upgrade.podLabels) . | replace "'" "" | nindent 8 }}
    spec:
      {{- if .Values.global.postgresql.deploy }}
      {{- with .Values.global.postgresql.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      nodeSelector: {{- include "pods.nodeSelector" ( list .Values.global.postgres $ ) | trim | nindent 8 }}
      tolerations: {{- include "pods.tolerations" ( list .Values.global.postgres $ ) | trim | nindent 8 }}
      volumes:
        - name: bootstrap-scripts-volume
          configMap:
            name: postgresql-bootstrap-scripts-configmap
            items:
              - key: createDatabasesScript
                path: create-database.sh
        - name: {{ .Values.global.postgresql.auth.secretName }}-volume
          secret:
            secretName: {{ .Values.global.postgresql.auth.secretName }}
        {{- if .Values.global.postgresql.deploy }}
        - name: datadir
          persistentVolumeClaim:
            claimName: data-postgres-0
        {{- end }}
      serviceAccount: infra-status-sa
      serviceAccountName: infra-status-sa
      {{- include "images.pullSecrets" . | nindent 6 }}
      containers:
        - image: {{ include "manifest.image.name" (dict "name" "hzp-util" "globals" .Values.global.components "repo" .Values.global.repository) }}
          name: postgresql-credentials-bootstrap-container
          imagePullPolicy: {{ .Values.global.postgresql.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: bootstrap-scripts-volume
              mountPath: /scripts
            - name: {{ .Values.global.postgresql.auth.secretName }}-volume
              mountPath: {{ $secretsDirMountPath }}
          env:
            - name: PGUSER
              value: {{ include "getPostgresUser" . }}
            - name: PGPASSWORD
              {{- (include "getPostgresPassword" .) | nindent 14 }}
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: create-postgres-host-configmap
                  key: postgresHost
            - name: PGPORT
              valueFrom:
                configMapKeyRef:
                  name: create-postgres-host-configmap
                  key: postgresPort
            - name: SECRETS_DIR
              value: {{ $secretsDirMountPath }}
          command:
            - /bin/sh
            - -c
            - |-
              set -e
              
              echo "Waiting for 10s..."
              sleep 10
              
              echo "Executing create-database.sh"
              sh /scripts/create-database.sh

              echo "Patching infra status config map"
              kubectl patch configmap infra-status-config -n {{ .Release.Namespace }} --type='merge' -p='{"data": {"waiting_for_postgres_to_be_initialized": "initialized"}}'
      {{- if .Values.global.postgresql.deploy }}
      initContainers:
        - name: init-postgres
          image: {{ include "manifest.image.name" (dict "name" "busybox" "globals" .Values.global.components "repo" .Values.global.repository) }}
          imagePullPolicy: {{ .Values.global.postgresql.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PGDUMP_DIR
              value: {{ .Values.global.postgresql.upgrade.storage.mountPath }}/{{.Values.global.postgresql.upgrade.from}}/backup
          volumeMounts:
            - name: datadir
              mountPath: {{ .Values.global.postgresql.upgrade.storage.mountPath }}
              subPath: {{ .Values.global.postgresql.upgrade.storage.subPath }}
          command:
            - sh
            - -c
            - |
              echo 'Waiting for PostgreSQL to become ready...'
              until printf "." && nc -z -w 2 postgres 5432; do
                  sleep 2;
              done;
              if [ -d "${PGDUMP_DIR}" ] && [ -n "${PGDUMP_DIR}" ]; then
                  echo 'Restore in progress, waiting ...'
                  until test -f ${PGDUMP_DIR}/success; do
                      sleep 2;
                  done;
              fi
              echo 'PostgreSQL OK âœ“'
      {{- end }}
      restartPolicy: Never
  backoffLimit: 15