{{- $bootstrap := .Values.bootstrap -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-bootstrap
spec:
  template:
    metadata:
      name: vault-bootstrap
      labels:
{{- tpl (toYaml .Values.bootstrap.podLabels) . | replace "'" "" | nindent 8 }}
    spec:
      {{- include "images.pullSecrets" . | nindent 6 }}
      nodeSelector: {{- include "pods.nodeSelector" ( list .Values.bootstrap $ ) | trim | nindent 8 }}
      tolerations: {{- include "pods.tolerations" ( list .Values.bootstrap $ ) | trim | nindent 8 }}
      affinity: {{- include "pods.affinity" ( list .Values.bootstrap $ ) | trim | nindent 8 }}
      volumes:
        - name: policy-config-volume
          configMap:
            name: policy-configmap
        {{- include "logLevel.configMap.volume" $ | indent 8 }}
      containers:
        - image: {{ include "manifest.image.name" (dict "name" $bootstrap.image.name "globals" .Values.global.components  "repo" .Values.global.repository) }}
          name: vault-bootstrap-container
          imagePullPolicy: Always
          volumeMounts:
            - name: policy-config-volume
              mountPath: /home/vaultbootstrap/{{ .Values.bootstrap.config.policies.path }}
            {{- include "logLevel.configMap.mount" $ | indent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ .Values.global.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.global.podSecurityContext.runAsGroup }}
            allowPrivilegeEscalation: false
          env:
            - name: POLICIES_PATH
              value: {{ .Values.bootstrap.config.policies.path }}
            - name: VAULT_SECRET_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: VAULT_HOST
              value: "{{ tpl .Values.global.vault.host . }}"
            - name: VAULT_PORT
              value: "{{ .Values.global.vault.port }}"
            - name: VAULT_POD_NAMES
              value: "{{- range $i := until 3 }}{{- if $i }},{{- end }}{{ printf "%s-%d" $.Values.global.vault.serviceName $i }}{{- end }}"
            - name: VAULT_INIT
              value: 'true'
            {{- if $.Values.global.nginx_gw.enabled }}
              {{- $domainList := list }}
              {{- range .Values.bootstrap.imtls.secret.domains }}  
                {{- $domain := printf "%s.%s.svc.cluster.local" . $.Release.Namespace }}
                {{- $domainList = append $domainList $domain }}
              {{- end }} 
            - name: SERVICE_NAMES
              value: {{ join "," .Values.bootstrap.imtls.secret.names }}
            - name: DOMAINS_ALLOWED
              value: {{ join "," $domainList | quote |}}
            {{- end }}
            - name: FQDN
              value: {{ .Values.global.ingress.fqdn }}
            - name: MTLS_HOST
              value: {{ template "GetMTLSHost" (dict "namespace" .Release.Namespace "prefix" $.Values.global.istio.defaultPrefix.mTLSHost "default" $.Values.global.istio.mTLSHost "fqdn" $.Values.global.ingress.fqdn) }}
            - name: MTLS_RECOVERY_HOST
              value: {{ template "GetMTLSHost" (dict "namespace" .Release.Namespace "prefix" $.Values.global.istio.defaultPrefix.mTLSHostRecovery "default" $.Values.global.istio.mTLSHostRecovery "fqdn" $.Values.global.ingress.fqdn) }}
            - name: IS_UPGRADE
              value: {{ if .Release.IsUpgrade }} 'true' {{ else }} 'false' {{ end }}
            - name: DAYS_TO_EXPIRATION
              value: "7" # rotate when it's less than 7 days
      initContainers:
        - image: {{ include "manifest.image.name" (dict "name" "hzp-util" "globals" .Values.global.components "repo" .Values.global.repository) }}
          imagePullPolicy: Always
          name: init-vault
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ .Values.global.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.global.podSecurityContext.runAsGroup }}
            allowPrivilegeEscalation: false
          env:
            - name: VAULT_HOST
              value: "{{ tpl .Values.global.vault.host . }}"
            - name: VAULT_PORT
              value: "{{ .Values.global.vault.port }}"
          command:
            - sh
            - -c
            - |
              echo "Waiting for Vault to become ready..."
              until printf "." && nc -z -w 2 edgevault ${VAULT_PORT}; do
                sleep 2;
              done;
              echo ""
              echo "Making health check and init api calls..."

              health_command="curl -o /tmp/health_response.txt -s -w "%{http_code}" --connect-timeout 2 ${VAULT_HOST}:${VAULT_PORT}/v1/sys/health"
              init_command="curl -o /tmp/init_response.txt -s -w "%{http_code}" --connect-timeout 2 ${VAULT_HOST}:${VAULT_PORT}/v1/sys/init"
              
              health_status=$(eval "$health_command")
              init_status=$(eval "$init_command")
              
              health_response=$(cat /tmp/health_response.txt)
              init_response=$(cat /tmp/init_response.txt)
              
              echo "health status: $health_status"
              echo "health message: $health_response"
              echo "init status: $init_status"
              echo "init message: $init_response"
              
              until [[ "$health_status" != "000" && "$health_status" != "500" && "$health_status" != "404" && "$init_status" != "503" ]]; do
                  sleep 5;
                  health_status=$(eval "$health_command")
                  init_status=$(eval "$init_command")
                  health_response=$(cat /tmp/health_response.txt)
                  init_response=$(cat /tmp/init_response.txt)
                  echo "health status: $health_status"
                  echo "health message: $health_response"
                  echo "init status: $init_status"
                  echo "init message: $init_response"
              done;
              echo 'Vault OK âœ“'
      serviceAccountName: bootstrap-service-account
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
