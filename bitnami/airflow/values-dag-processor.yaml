## @section Airflow Dag Processor parameters
## ref: https://airflow.apache.org/docs/apache-airflow/stable/authoring-and-scheduling/dagfile-processing.html
##
dagProcessor:
  ## @param dagProcessor.enabled Run Airflow Dag Processor Manager as a standalone component
  ##
  enabled: false
  ## @param dagProcessor.replicaCount Number of Airflow Dag Processor replicas
  ##
  replicaCount: 1
  ## @param dagProcessor.command Override cmd
  ##
  command: []
  ## @param dagProcessor.args Override args
  ##
  args: []
  ## @param dagProcessor.extraEnvVars Add extra environment variables
  ##
  extraEnvVars: []
  ## @param dagProcessor.extraEnvVarsCM ConfigMap with extra environment variables
  ##
  extraEnvVarsCM: ""
  ## @param dagProcessor.extraEnvVarsSecret Secret with extra environment variables
  ##
  extraEnvVarsSecret: ""
  ## @param dagProcessor.extraEnvVarsSecrets List of secrets with extra environment variables for Airflow Dag Processor pods
  ##
  extraEnvVarsSecrets: []
  ## Configure extra options for Airflow Dag Processor containers' liveness, readiness and startup probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  ## @param dagProcessor.livenessProbe.enabled Enable livenessProbe on Airflow Dag Processor containers
  ## @param dagProcessor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param dagProcessor.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param dagProcessor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param dagProcessor.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param dagProcessor.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 15
    failureThreshold: 6
    successThreshold: 1
  ## @param dagProcessor.readinessProbe.enabled Enable readinessProbe on Airflow Dag Processor containers
  ## @param dagProcessor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param dagProcessor.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param dagProcessor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param dagProcessor.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param dagProcessor.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 15
    failureThreshold: 6
    successThreshold: 1
  ## @param dagProcessor.startupProbe.enabled Enable startupProbe on Airflow Dag Processor containers
  ## @param dagProcessor.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param dagProcessor.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param dagProcessor.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param dagProcessor.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param dagProcessor.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param dagProcessor.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param dagProcessor.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param dagProcessor.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## Airflow Dag Processor resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param dagProcessor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if dagProcessor.resources is set (dagProcessor.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "small"
  ## @param dagProcessor.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Airflow Dag Processor pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param dagProcessor.podSecurityContext.enabled Enabled Airflow Dag Processor pods' Security Context
  ## @param dagProcessor.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param dagProcessor.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param dagProcessor.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param dagProcessor.podSecurityContext.fsGroup Set Airflow Dag Processor pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## Configure Airflow Dag Processor containers (only main one) Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param dagProcessor.containerSecurityContext.enabled Enabled Airflow Dag Processor containers' Security Context
  ## @param dagProcessor.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param dagProcessor.containerSecurityContext.runAsUser Set Airflow Dag Processor containers' Security Context runAsUser
  ## @param dagProcessor.containerSecurityContext.runAsGroup Set Airflow Dag Processor containers' Security Context runAsGroup
  ## @param dagProcessor.containerSecurityContext.runAsNonRoot Set Airflow Dag Processor containers' Security Context runAsNonRoot
  ## @param dagProcessor.containerSecurityContext.privileged Set Airflow Dag Processor container's Security Context privileged
  ## @param dagProcessor.containerSecurityContext.allowPrivilegeEscalation Set Airflow Dag Processor container's Security Context allowPrivilegeEscalation
  ## @param dagProcessor.containerSecurityContext.readOnlyRootFilesystem Set Airflow Dag Processor container's Security Context readOnlyRootFilesystem
  ## @param dagProcessor.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param dagProcessor.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## @param dagProcessor.lifecycleHooks for the Airflow Dag Processor container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param dagProcessor.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: false
  ## @param dagProcessor.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param dagProcessor.podLabels Add extra labels to the Airflow Dag Processor pods
  ##
  podLabels: {}
  ## @param dagProcessor.podAnnotations Add extra annotations to the Airflow Dag Processor pods
  ##
  podAnnotations: {}
  ## @param dagProcessor.affinity Affinity for Airflow Dag Processor pods assignment (evaluated as a template)
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: `dagProcessor.podAffinityPreset`, `dagProcessor.podAntiAffinityPreset`, and `dagProcessor.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## Node affinity preset
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ## @param dagProcessor.nodeAffinityPreset.key Node label key to match. Ignored if `dagProcessor.affinity` is set.
  ## @param dagProcessor.nodeAffinityPreset.type Node affinity preset type. Ignored if `dagProcessor.affinity` is set. Allowed values: `soft` or `hard`
  ## @param dagProcessor.nodeAffinityPreset.values Node label values to match. Ignored if `dagProcessor.affinity` is set.
  ##
  nodeAffinityPreset:
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    type: ""
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param dagProcessor.nodeSelector Node labels for Airflow Dag Processor pods assignment
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param dagProcessor.podAffinityPreset Pod affinity preset. Ignored if `dagProcessor.affinity` is set. Allowed values: `soft` or `hard`.
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param dagProcessor.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `dagProcessor.affinity` is set. Allowed values: `soft` or `hard`.
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## @param dagProcessor.tolerations Tolerations for Airflow Dag Processor pods assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param dagProcessor.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## @param dagProcessor.priorityClassName Priority Class Name
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  ##
  priorityClassName: ""
  ## @param dagProcessor.schedulerName Use an alternate K8s scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param dagProcessor.terminationGracePeriodSeconds Seconds Airflow Dag Processor pod needs to terminate gracefully
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  terminationGracePeriodSeconds: ""
  ## @param dagProcessor.updateStrategy.type Airflow Dag Processor deployment strategy type
  ## @param dagProcessor.updateStrategy.rollingUpdate Airflow Dag Processor deployment rolling update configuration parameters
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  ##
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  ## @param dagProcessor.sidecars Add additional sidecar containers to the Airflow Dag Processor pods
  ## Example:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param dagProcessor.initContainers Add additional init containers to the Airflow Dag Processor pods
  ## Example:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers: []
  ## @param dagProcessor.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Airflow Dag Processor pods
  ##
  extraVolumeMounts: []
  ## @param dagProcessor.extraVolumes Optionally specify extra list of additional volumes for the Airflow Dag Processor pods
  ##
  extraVolumes: []
  ## Airflow Dag Processor Pod Disruption Budget
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ## @param dagProcessor.pdb.create Deploy a pdb object for the Airflow Dag Processor pods
  ## @param dagProcessor.pdb.minAvailable Maximum number/percentage of unavailable Airflow Dag Processor replicas
  ## @param dagProcessor.pdb.maxUnavailable Maximum number/percentage of unavailable Airflow Dag Processor replicas
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Airflow Dag Processor Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param dagProcessor.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param dagProcessor.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports Airflow Dag Processor is listening
    ## on. When true, Airflow Dag Processor will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param dagProcessor.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param dagProcessor.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param dagProcessor.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param dagProcessor.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param dagProcessor.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
