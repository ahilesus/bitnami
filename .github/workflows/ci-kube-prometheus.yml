# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

name: '[CI/CD] Special CI for kube-prometheus'
on: # rebuild any PRs and main branch changes
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
      - bitnami:main
    paths:
      - 'bitnami/kube-prometheus/**'
# Remove all permissions by default
permissions: {}
#Â Avoid concurrency over the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
jobs:
  update-prometheus-rules:
    runs-on: ubuntu-latest
    name: Automatically update default Prometheus rules based on upstream
    outputs:
      result: ${{ steps.update-prometheus-rules.outputs.result }}
    steps:
      - name: Checkout bitnami/charts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.BITNAMI_BOT_TOKEN }}
          path: charts
      - name: Setup git configuration
        run: |
          cd $GITHUB_WORKSPACE/charts
          git config user.name "Bitnami Containers"
          git config user.email "bitnami-bot@vmware.com"
      - name: Install helm
        run: |
          HELM_TARBALL="helm-v3.8.1-linux-amd64.tar.gz"
          curl -SsLfO "https://get.helm.sh/${HELM_TARBALL}" && sudo tar xf "$HELM_TARBALL" --strip-components 1 -C /usr/local/bin
      - id: update-rules
        name: Update Prometheus rules
        run: |
          # This function returns the chart parameter name based on the rule name
          rule_parameter_from_rule_name() {
            local -r rule_name="${1:-missing rule_name}"

            kebab_to_camel() {
              IFS='-' read -r -a parts <<< "$1"
              for i in "${!parts[@]}"; do
                if [[ $i -eq 0 ]]; then
                  camelCase="${parts[i]}"
                else
                  camelCase+=$(tr '[:lower:]' '[:upper:]' <<< ${parts[i]:0:1})${parts[i]:1}
                fi
              done
              echo "$camelCase"
            }

            case "$rule_name" in
              "config-reloaders" | "etcd" | "kube-state-metrics" | "kubernetes-apps" | "kubernetes-resources" | "kubernetes-storage" | "prometheus" | "prometheus-operator") kebab_to_camel "$rule_name" ;;
              "alertmanager.rules" | "general.rules" | "kubelet.rules" | "node.rules" | "kube-apiserver-availability.rules" | "kube-apiserver-burnrate.rules" | "kube-apiserver-histogram.rules" | "kube-apiserver-slos.rules" | "kube-prometheus-general.rules" | "kube-prometheus-node-recording.rules") kebab_to_camel "${rule_name%.rules}" ;;
              "k8s.rules.container-cpu-usage-seconds-total" | "k8s.rules.container-memory-cache" | "k8s.rules.container-memory-rss" | "k8s.rules.container-memory-swap" | "k8s.rules.container-memory-working-set-bytes" | "k8s.rules.container-resource" | "k8s.rules.pod-owner") kebab_to_camel "${rule_name//.rules./-}" ;;
              "kubernetes-system-apiserver" | "kubernetes-system-kubelet" | "kubernetes-system") echo "kubernetesSystem" ;;
              "kube-scheduler.rules") echo "kubeSchedulerAlerting" ;;
              "kubernetes-system-controller-manager") echo "kubeControllerManager" ;;
              "kubernetes-system-kube-proxy") echo "kubeProxy" ;;
              "kubernetes-system-scheduler") echo "kubeSchedulerRecording" ;;
              "node-exporter") echo "nodeExporterAlerting" ;;
              "node-exporter.rules") echo "nodeExporterRecording" ;;
              "node-network") echo "network" ;;
              *) echo "" ;;
            esac
          }
          
          mkdir -p "${GITHUB_WORKSPACE}/charts/bitnami/kube-prometheus/templates/prometheus/rules"
          cd "${GITHUB_WORKSPACE"/charts/bitnami/kube-prometheus/templates/prometheus/rules"
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts 2>&1 >/dev/null 2>&1
          helm repo update >/dev/null 2>&1
          helm template prometheus-community/kube-prometheus-stack \
            --set fullnameOverride=foo \
            --set defaultRules.create=true \
            --show-only templates/prometheus/rules-1.14/* \
            | awk 'NF' | yq --no-doc -s '.metadata.name | sub("^foo-"; "") + ".yaml"'
          for m in *.yaml; do
            rule_name="${m%.yaml}"
            rule_parameter="$(rule_parameter_from_rule_name "$rule_name")"
            # We're just interested in the .spec given we build apiVersion, kind and metadata
            # based in Bitnami standards
            spec="$(yq '{"spec": .spec}' "$m")"
            cat > "$m" << EOF
          {{- /*
          Copyright Broadcom, Inc. All Rights Reserved.
          SPDX-License-Identifier: APACHE-2.0
          */}}

          {{- if and .Values.prometheus.enabled .Values.prometheus.defaultRules.create .Values.prometheus.defaultRules.rules.$rule_parameter }}
          apiVersion: monitoring.coreos.com/v1
          kind: PrometheusRule
          metadata:
            name: {{ printf "%s-$rule_name" (include "kube-prometheus.prometheus.fullname" .) }}
            namespace: {{ include "common.names.namespace" . | quote }}
            labels: {{ include "kube-prometheus.prometheus.labels" . | nindent 4 }}
            {{- if .Values.commonAnnotations }}
            annotations: {{- include "common.tplvalues.render" ( dict "value" ..Values.commonAnnotations "context" . ) | nindent 4 }}
            {{- end }}
          $spec
          {{- end }}
          EOF
          done

          cd "${GITHUB_WORKSPACE}/charts"
          if git status -s | grep "bitnami/kube-prometheus/templates/prometheus/rules"; then
            git add "bitnami/kube-prometheus/templates/prometheus/rules" && git commit -m "Update Prometheus rules" --signoff
          fi
      - id: update-pr
        name: Push changes
        run: |
          cd $GITHUB_WORKSPACE/charts
          # Push all the new commits, if any
          if [[ $(git cherry -v) ]]; then
            git push
          fi
